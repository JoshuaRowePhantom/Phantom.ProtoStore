include "Phantom.ProtoStore/ProtoStore.fbs";

namespace Phantom.ProtoStore.FlatBuffers;

table DatabaseHeader {
    version : uint32;
    log_alignment:uint32;
    log_replay_extent_names : [LogExtentName];
    epoch : uint64;
    next_index_number : uint64;
    next_partition_number : uint64;
}

enum ExtentFormatVersion : byte {
    None = 0,
    V1 = 1
}

// An ExtentHeader is written as a rooted size-prefixed table to the start
// of an extent.
table ExtentHeader {
    extent_version : ExtentFormatVersion = V1;
    extent_name : ExtentName;
}

// MessageHeader_V1 is used in ExtentFormatVersion_V1
struct MessageHeader_V1
{
    // The crc32 of the message content bytes beginning
    // at the first byte of the message and extending
    // for the message size.
    crc32 : uint32;
    // The size and alignment of the message, with the following algorithm:
    //  For all message sizes, round up to 4 byte boundary.
    //  Minimum message alignment is 8.
    //  Store message alignment in low 2 bits:
    //  00 =  4
    //  01 =  8
    //  10 = 16
    //  11 = 32
    //  Message size is stored in high 30 bits.
    //  To decode:
    //      Alignment = 1 << ((message_size_and_alignment & 0x3) + 2)
    //      Size = message_size_and_alignment & 0xfffffffc
    message_size_and_alignment : uint32;
}

table DataValue {
    data : [byte];
    // The required alignment of the data stored in "data"
    // if the data is flatbuffers data.
    flatbuffers_alignment : ubyte = 4;
}

table LoggedRowWrite
{
    index_number : uint64;
    sequence_number : uint64;
    checkpoint_number : uint64;
    key : DataValue;
    value : DataValue;
    distributed_transaction_id : DataValue;
    local_transaction_id : uint64;
    write_id : uint32;
}

table LoggedCommitLocalTransaction
{
    write_id : [uint32];
    local_transaction_id : uint64;
    write_sequence_number : uint64;
}

table LoggedAbortLocalTransaction
{
    local_transaction_id : uint64;
}

table LoggedCreateIndex
{
    index_number : uint64;
}

table LoggedCreateExtent
{
    extent_name : ExtentName;
}

table LoggedCheckpoint
{
    index_number : uint64;
    checkpoint_number : [uint64];
}

table LoggedCommitExtent
{
    extent_name : ExtentName;
}

table LoggedDeleteExtentPendingPartitionsUpdated
{
    extent_name : ExtentName;
    partitions_table_checkpoint_number : uint64;
}

table LoggedUpdatePartitions
{
    index_number : uint64;
}

table LoggedPartitionsData
{
    header_extent_names : [IndexHeaderExtentName];
    partitions_table_checkpoint_number : uint64;
}

table LoggedCreatePartition
{
    partition_number : uint64;
}

union LogEntry
{
    LoggedRowWrite,
    LoggedCommitLocalTransaction,
    LoggedAbortLocalTransaction,
    LoggedCreateIndex,
    LoggedCreateExtent,
    LoggedCommitExtent,
    LoggedCheckpoint,
    LoggedDeleteExtentPendingPartitionsUpdated,
    LoggedUpdatePartitions,
    LoggedPartitionsData,
    LoggedCreatePartition
}

table LogRecord
{
    log_entry : [LogEntry];
}

table PartitionTreeEntryValue {
    write_sequence_number : uint64;

    // All of "value", "big_value", "flat_value" are not set if this is a delete.
    // The serialized value as a root flat buffer.
    value : DataValue;

    // The embedded flatbuffers value.
    flat_value : ValuePlaceholder;

    // The value is large, and was not put directly into the row.
    big_value : MessageReference_V1;

    // Set if this transaction has not been resolved
    // as of when the row was written to disk.
    // This value is cleared upon merge whenever
    // the transaction outcome is known.
    unresolved_transaction_id : DataValue;
}

// A reference to a message elsewhere in the extent.
struct MessageReference_V1 {
    // The message header for the message.
    message_header : MessageHeader_V1;
    // The location of the message in the extent.
    message_offset : uint64;
}

table PartitionTreeEntryKey {

    // The highest key in the tree entry.
    key : DataValue;

    // The re-encoded flatbuffers key.
    flat_key : ValuePlaceholder;

    lowest_write_sequence_number_for_key : uint64;

    // The values if this is a leaf node
    // and there are multiple values for the same key.
    values : [PartitionTreeEntryValue];

    // If there is only a single value for the key,
    // the following fields are set.
    // If there is only a single value for the key,
    // and the value represents a delete, 
    // all of "values" and these fields will be not set.
    
    // All of "value", "big_value", "flat_value" are not set if this is a delete.
    // The serialized value as a root flat buffer.
    single_value : DataValue;

    // The embedded flatbuffers value.
    single_flat_value : ValuePlaceholder;

    // The value is large, and was not put directly into the row.
    single_big_value : MessageReference_V1;

    // Set if this transaction has not been resolved
    // as of when the row was written to disk.
    // This value is cleared upon merge whenever
    // the transaction outcome is known.
    single_unresolved_transaction_id : DataValue;


    // The child tree node if this is a non-leaf entry.
    // This will be a reference to a PartitionMessage containing a PartitionTreeNode.
    child_tree_node : MessageReference_V1;
}

table PartitionTreeNode {
    keys : [PartitionTreeEntryKey];
    level : uint64;
    size : uint64;
    approximate_key_count : uint64;
    approximate_key_count_running_total : uint64;
}

enum PartitionBloomFilterHashAlgorithm : byte {
    Version1 = 0
}

table PartitionBloomFilter {
    algorithm : PartitionBloomFilterHashAlgorithm;
    hash_function_count : uint32;
    filter : [byte];
}

table PartitionRoot {
    root_tree_node : MessageReference_V1;
    row_count : uint64;
    bloom_filter : MessageReference_V1;
    earliest_sequence_number : uint64;
    latest_sequence_number : uint64;
}

table PartitionHeader {
    partition_root : MessageReference_V1;
}

table PartitionMessage {
    tree_node : PartitionTreeNode;
    value : DataValue;
    header : PartitionHeader;
    root : PartitionRoot;
    bloom_filter : PartitionBloomFilter;
}

table IndexesByNameKey {
    index_name : string;
}

table IndexesByNameValue {
    index_number : uint64;
}

table PartitionsKey {
    index_number : uint64;
    header_extent_name : IndexHeaderExtentName;
}

table PartitionsValue {
    data_extent_name : IndexDataExtentName;
    level : uint64;
    size : uint64;
    // The merge that generated the partition.
    merge_unique_id : MergesKey;
    // The latest checkpoint number that is in the partition
    latest_checkpoint_number : uint64;
}

table MergesKey {
    index_number : uint64;
    // This will be the name of an extent in the merge.
    merges_unique_id : IndexHeaderExtentName;
}

table MergeResumeKey {
    key : DataValue;
    write_sequence_number : uint64;
}

table MergesValue {
    source_header_extent_names : [IndexHeaderExtentName];
    source_level_number : uint64;
    destination_level_number : uint64;
    // The checkpoint number to report for the generated partitions.
    latest_checkpoint_number : uint64;

    // If StartKey is set, then resume the merge at the
    // given start key.  Otherwise, resume the merge
    // at the beginning of the key space.
    resume_key : MergeResumeKey;
}

table MergeProgressKey {
    merges_key : MergesKey;
    
    // This field is used only for query purposes.
    // All rows have a value of 0.  One can query for a value of 1 at the high end of a range
    // to get all the rows with the same MergesKey but different HeaderExtentName values.
    range_discriminator : uint8;

    header_extent_name : IndexHeaderExtentName;
}

table MergeProgressValue {
    data_size : uint64;
}

// ValuePlaceholder is used to represent an arbitrary table of arbitrary type
// provided by a user
table ValuePlaceholder {
}

// SchemaPlaceholder is used to represent a reflection::Schema object.
table SchemaPlaceholder {
}

table ProtocolBuffersMessageDescription {
    // google.protobuf.FileDescriptorSet
    file_descriptors : [uint8];
    message_name : string;
}

table FlatBuffersObjectDescription {
    // Actually a reflection.Schema object.
    schema : SchemaPlaceholder;
    object_index : uint32;
}

table FlatBuffersSchemaDescription {
    object_description : FlatBuffersObjectDescription;
    graph_encoding_options : FlatBuffersGraphEncodingOptions;
    string_encoding_options : FlatBuffersStringEncodingOptions;
    message_encoding_options : FlatBuffersMessageEncodingOptions;
}

table ProtocolBuffersSchemaDescription {
    message_description : ProtocolBuffersMessageDescription;
}

union SchemaDescription {
    FlatBuffersSchemaDescription, 
    ProtocolBuffersSchemaDescription
}

table KeySchemaDescription {
    description : SchemaDescription;
}

table ValueSchemaDescription {
    description : SchemaDescription ;
}

table IndexSchemaDescription {
    key : KeySchemaDescription;
    value : ValueSchemaDescription;
}

table IndexesByNumberKey {
    index_number : uint64;
}

table IndexesByNumberValue {
    schema : IndexSchemaDescription;
    index_name : string;
    create_sequence_number : uint64;
}

file_identifier "PSEX";
