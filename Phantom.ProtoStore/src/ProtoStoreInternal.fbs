namespace Phantom.ProtoStore.FlatBuffers;

table DatabaseHeaderExtentName {
    header_copy_number : uint64;
}

table IndexExtentName {
    partition_number : uint64;
    index_number : uint64;
    level : uint64;
    index_name : string;
}

table IndexDataExtentName {
    index_extent_name : IndexExtentName;
}

table IndexHeaderExtentName {
    index_extent_name : IndexExtentName;
}

table LogExtentName {
    log_extent_sequence_number : uint64;
}

union ExtentNameUnion {
    IndexHeaderExtentName,
    IndexDataExtentName,
    DatabaseHeaderExtentName,
    LogExtentName
}

table ExtentName
{
    extent_name : ExtentNameUnion;
}

table DatabaseHeader {
    version : uint32;
    log_alignment:uint32;
    log_replay_extent_names : [LogExtentName];
    epoch : uint64;
    next_index_number : uint64;
    next_partition_number : uint64;
}

enum ExtentFormatVersion : byte {
    None = 0,
    V1 = 1
}

// An ExtentHeader is written as a rooted size-prefixed table to the start
// of an extent.
table ExtentHeader {
    extent_version : ExtentFormatVersion = V1;
    extent_name : ExtentName;
}

// MessageHeader_V1 is used in ExtentFormatVersion_V1
struct MessageHeader_V1
{
    // The crc32 of the message content bytes beginning
    // at the first byte of the message and extending
    // for the message size.
    crc32 : uint32;
    // The size and alignment of the message, with the following algorithm:
    //  For all message sizes, round up to 4 byte boundary.
    //  Minimum message alignment is 8.
    //  Store message alignment in low 2 bits:
    //  00 =  4
    //  01 =  8
    //  10 = 16
    //  11 = 32
    //  Message size is stored in high 30 bits.
    //  To decode:
    //      Alignment = 1 << ((message_size_and_alignment & 0x3) + 2)
    //      Size = message_size_and_alignment & 0xfffffffc
    message_size_and_alignment : uint32;
}

table LoggedRowWrite
{
    index_number : uint64;
    sequence_number : uint64;
    checkpoint_number : uint64;
    key : [byte] (force_align: 32);
    value : [byte] (force_align: 32);
    distributed_transaction_id : [byte];
    local_transaction_id : uint64;
    write_id : uint32;
}

table LoggedCommitLocalTransaction
{
    write_id : [uint32];
    local_transaction_id : uint64;
    write_sequence_number : uint64;
}

table LoggedAbortLocalTransaction
{
    local_transaction_id : uint64;
}

table LoggedCreateIndex
{
    index_number : uint64;
}

table LoggedCreateExtent
{
    extent_name : ExtentName;
}

table LoggedCheckpoint
{
    index_number : uint64;
    checkpoint_number : [uint64];
}

table LoggedCommitExtent
{
    extent_name : ExtentName;
}

table LoggedDeleteExtentPendingPartitionsUpdated
{
    extent_name : ExtentName;
    partitions_table_checkpoint_number : uint64;
}

table LoggedUpdatePartitions
{
    index_number : uint64;
}

table LoggedPartitionsData
{
    header_extent_names : [ExtentName];
    partitions_table_checkpoint_number : uint64;
}

table LoggedCreatePartition
{
    partition_number : uint64;
}

union LogEntry
{
    LoggedRowWrite,
    LoggedCommitLocalTransaction,
    LoggedAbortLocalTransaction,
    LoggedCreateIndex,
    LoggedCreateExtent,
    LoggedCommitExtent,
    LoggedCheckpoint,
    LoggedDeleteExtentPendingPartitionsUpdated,
    LoggedUpdatePartitions,
    LoggedPartitionsData,
    LoggedCreatePartition
}

table LogRecord
{
    log_entry : [LogEntry];
}

table PartitionDataValue {
    // The underlying value.
    data : [byte];

    // The required alignment of the data stored in "data"
    alignment : byte;
}

table PartitionTreeEntryValue {
    write_sequence_number : uint64;

    // Value is not set if this is a delete.
    value : PartitionDataValue;

    // The value is large, and was not put directly into the row.
    big_value : MessageReference_V1;

    // Set if this transaction has not been resolved
    // as of when the row was written to disk.
    // This value is cleared upon merge whenever
    // the transaction outcome is known.
    unresolved_transaction_id : [byte];
}

// A reference to a message elsewhere in the extent.
struct MessageReference_V1 {
    // The message header for the message.
    message_header : MessageHeader_V1;
    // The location of the message in the extent.
    message_offset : uint64;
}

table PartitionTreeEntryKey {
    // The highest key in the tree entry.
    key : PartitionDataValue;
    lowest_write_sequence_number_for_key : uint64;

    // The values if this is a leaf node.
    values : [PartitionTreeEntryValue];

    // The child tree node if this is a non-leaf entry.
    // This will be a reference to a PartitionMessage containing a PartitionTreeNode.
    child_tree_node : MessageReference_V1;
}

table PartitionTreeNode {
    keys : [PartitionTreeEntryKey];
    level : uint64;
    size : uint64;
    approximate_key_count : uint64;
    approximate_key_count_running_total : uint64;
}

enum PartitionBloomFilterHashAlgorithm : byte {
    Version1 = 0
}

table PartitionBloomFilter {
    algorithm : PartitionBloomFilterHashAlgorithm;
    hash_function_count : uint32;
    filter : [byte];
}

table PartitionRoot {
    root_tree_node : MessageReference_V1;
    row_count : uint64;
    bloom_filter : MessageReference_V1;
    earliest_sequence_number : uint64;
    latest_sequence_number : uint64;
}

table PartitionHeader {
    partition_root : MessageReference_V1;
}

table PartitionMessage {
    tree_node : PartitionTreeNode;
    value : PartitionDataValue;
    header : PartitionHeader;
    root : PartitionRoot;
    bloom_filter : PartitionBloomFilter;
}

file_identifier "PSEX";
