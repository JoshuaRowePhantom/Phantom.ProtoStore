namespace Phantom.ProtoStore.FlatBuffers;

table DatabaseHeaderExtentName {
    header_copy_number : uint64;
}

table IndexExtentName {
    partition_number : uint64;
    index_number : uint64;
    level : uint64;
    index_name : string;
}

table IndexDataExtentName {
    index_extent_name : IndexExtentName;
}

table IndexHeaderExtentName {
    index_extent_name : IndexExtentName;
}

table LogExtentName {
    log_extent_sequence_number : uint64;
}

union ExtentName {
    IndexHeaderExtentName,
    IndexDataExtentName,
    DatabaseHeaderExtentName,
    LogExtentName
}

table DatabaseHeader {
    version : uint32;
    log_alignment:uint32;
    log_replay_extent_names : [LogExtentName];
    epoch : uint64;
    next_index_number : uint64;
    next_partition_number : uint64;
}

enum ExtentFormatVersion : uint8 {
    None = 0,
    V1 = 1
}

// An ExtentHeader is written as a rooted size-prefixed table to the start
// of an extent.
table ExtentHeader {
    extent_version : ExtentFormatVersion = V1;
    extent_name : ExtentName;
}

// MessageHeader_V1 is used in ExtentFormatVersion_V1
struct MessageHeader_V1
{
    // The crc32 of the message content bytes beginning
    // at the first byte of the message and extending
    // for the message size.
    crc32 : uint32;
    // The size and alignment of the message, with the following algorithm:
    //  For all message sizes, round up to 4 byte boundary.
    //  Minimum message alignment is 8.
    //  Store message alignment in low 2 bits:
    //  00 =  4
    //  01 =  8
    //  10 = 16
    //  11 = 32
    //  Message size is stored in high 30 bits.
    //  To decode:
    //      Alignment = 1 << ((message_size_and_alignment & 0x3) + 2)
    //      Size = message_size_and_alignment & 0xfffffffc
    message_size_and_alignment : uint32;
}

table LoggedRowWrite
{
    index_number : uint64;
    sequence_number : uint64;
    checkpoint_number : uint64;
    key : [byte] (force_align: 32);
    value : [byte] (force_align: 32);
    distributed_transaction_id : [byte];
    local_transaction_id : uint64;
}

table LoggedCommitLocalTransaction
{
    local_transaction_id : uint64;
}

table LoggedAbortLocalTransaction
{
    local_transaction_id : uint64;
}

table LoggedCreateIndex
{
    index_number : uint64;
}

table LoggedCreateExtent
{
    extent_name : ExtentName;
}

table LoggedCheckpoint
{
    index_number : uint64;
    checkpoint_number : [uint64];
}

table LoggedCommitExtent
{
    extent_name : ExtentName;
}

table LoggedDeleteExtentPendingPartitionsUpdated
{
    extent_name : ExtentName;
    partitions_table_checkpoint_number : uint64;
}

table LoggedUpdatePartitions
{
    index_number : uint64;
}

table LoggedPartitionsData
{
    header_extent_names : [ExtentName];
    partitions_table_checkpoint_number : uint64;
}

table LoggedCreatePartition
{
    partition_number : uint64;
}

union LogEntry
{
    LoggedRowWrite,
    LoggedCommitLocalTransaction,
    LoggedAbortLocalTransaction,
    LoggedCreateIndex,
    LoggedCreateExtent,
    LoggedCommitExtent,
    LoggedCheckpoint,
    LoggedDeleteExtentPendingPartitionsUpdated,
    LoggedUpdatePartitions,
    LoggedPartitionsData,
    LoggedCreatePartition
}

table LogMessage
{
    log_entry : [LogEntry];
}

file_identifier "PSEX";
