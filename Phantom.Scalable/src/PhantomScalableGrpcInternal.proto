syntax = "proto3";
package Phantom.Scalable.Grpc.Internal;
import "google/protobuf/any.proto";
import "Phantom.Scalable/PhantomScalableGrpc.proto";

message EpochNumber {
    uint64 Value = 1;
}

message PaxosBallotNumber {
    EpochNumber EpochNumber = 1;
    uint64 BallotNumber = 2;
}

message Phase1aMessage {
    PaxosBallotNumber BallotNumber = 1;
}

message Phase2aMessage {
}

message LearnMessage {
}

message Phase1bMessage {
}

message Phase2bMessage {
}

message NakMessage {
}

message InternalLockManagerOperation{
    oneof PayloadType {
        LockManagerOperation LockManagerOperation = 1;
    }
}

message InternalLockManagerResult {
    oneof PayloadType {
        LockManagerResult LockManagerResult = 1;
    }
}

message InternalOperation {
    oneof PayloadType {
        google.protobuf.Any Payload = 1;
        InternalLockManagerOperation LockManagerPayload = 2;
    }
}

message InternalOperationResult {
    TransactionOutcome TransactionOutcome = 1;
    oneof PayloadType {
        google.protobuf.Any Payload = 2;
        Fault Fault = 3;
        InternalLockManagerResult LockManagerPayload = 4;
    }
}

message InternalOperationInformation {
    InternalOperationIdentifier InternalOperationIdentifier = 1;
    InternalOperation InternalOperation = 2;
    InternalTransactionInformation InternalTransactionInformation = 3;
}

message InternalTransactionIdentifier {
    string UniqueIdentifier = 1;
}

message InternalTransactionInformation {
    InternalTransactionIdentifier InternalTransactionIdentifier = 1;
    repeated InternalOperationTransactionParticipantResource ParticipantResources = 2;
}

message InternalResourceManager {
    string InternalResourceManagerName = 1;
}

message InternalResource {
    DataComponentString InternalResourceName = 1;
}

message ParticipantResource {
    InternalResourceManager InternalResourceManager = 1;
    InternalResource InternalResource = 2;
}

message ParticipantNode {
    NodeIdentifier NodeIdentifier = 1;
}

message InternalOperationIdentifier {
    string UniqueIdentifier = 1;
    ParticipantResource ParticipantResource = 2;
}

message InternalOperationTransactionParticipantResource {
    InternalOperationIdentifier OperationIdentifier = 1;
    ParticipantResource ParticipantResource = 2;
}

message GetOperationInformationRequestMessage {
    InternalOperationIdentifier InternalOperationIdentifier = 1;
}

message GetOperationInformationResponseMessage {
    InternalOperationInformation InternalOperationInformation = 1;
}

message ScalablePaxosRequestMessage {
    oneof MessageType {
        Phase1aMessage Phase1a = 1;
        Phase2aMessage Phase2a = 2;
        LearnMessage Learn = 3;
    }
}

message ScalablePaxosResponseMessage {
    oneof MessageType {
        Fault Fault = 1;
        Phase1bMessage Phase1b = 2;
        Phase2bMessage Phase2b = 3;
        NakMessage Nak = 4;
    }
}

message CommitTransactionOutcome {
    TransactionOutcome TransactionOutcome = 1;
}

message GetOperationResult {
}

message ProcessOperationRequest {
    // Either the identified for the operation
    // or the full operation data.
    // If the recipient doesn't have the full operation data and only an identifier
    // is provided, the recipient will return a ProcessOperationResponse with the NeedOperationInformationFault
    // field set.
    InternalOperationInformation InternalOperationInformation = 1;

    // Used to negotiate the paxos phase of processing.
    // This field may be absent if no paxos operations are required.
    ScalablePaxosRequestMessage PaxosMessage = 2;
    
    // If this field is present, the ProcessOperation request should
    // return the a ProcessOperationResponse with InternalOperationResult set before closing the stream.
    GetOperationResult GetOperationResult = 3;

    // If this field is present, the operation should be committed IF successful.
    // This field may be present even when the transaction outcome is not known
    // when a single participant transaction is in effect.
    CommitTransactionOutcome CommitTransactionOutcome = 4;
}

message ProcessOperationResponse {
    ScalablePaxosResponseMessage  ScalablePaxosResponseMessage = 1;
    NeedOperationInformationFault NeedOperationInformationFault = 2;
    Fault Fault = 3;
    InternalOperationResult InternalOperationResult = 4;
}

service ScalablePeerToPeerService {
    rpc ProcessOperation(
        ProcessOperationRequest
    ) returns (
        stream ProcessOperationResponse
    );
}

message DataComponent {
    oneof DataType {
        string String = 1;
        bytes Bytes = 2;
        google.protobuf.Any Any = 3;
        int64 Int64 = 4;
    }
}

message DataComponentString {
    repeated DataComponent Component = 1;
}

enum RelationshipType {
    Transitive = 0;
}

message InternalOperationInterferenceRelationship {
    RelationshipType RelationshipType = 1;
    DataComponentString Relationship = 2;
}

message LockContentKey {
    uint64 LockNumber = 1;
    uint64 Version = 2;
}

message LockContentValue {
    bytes Data = 1;
}

message LockMetadataKey {
    string LockName = 1;
}

message MutableLockMetadata {
    uint64 Version = 1;
}

message LockMetadataValue {
    uint64 LockNumber = 1;
    MutableLockMetadata Prepared = 2;
    MutableLockMetadata Committed = 3;
}

// This fault is sent when the recipient needs the full operation information.
message NeedOperationInformationFault {
}
